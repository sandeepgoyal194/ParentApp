package frameworks.retrofit;import com.google.gson.Gson;import com.google.gson.internal.LinkedTreeMap;import java.io.File;import java.util.Map;import frameworks.appsession.AppBaseApplication;import frameworks.appsession.UserInfo;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.OkHttpClient;import okhttp3.RequestBody;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Call;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;import transport.school.com.schoolapp.bean.ActiveRouteReply;import transport.school.com.schoolapp.bean.AttendanceRecord;import transport.school.com.schoolapp.bean.AttendanceUpdateResponse;import transport.school.com.schoolapp.bean.DeviceTokenRegister;import transport.school.com.schoolapp.bean.LocationUpdateReply;import transport.school.com.schoolapp.bean.LocationUpdateRequest;import transport.school.com.schoolapp.bean.LoginRequest;import transport.school.com.schoolapp.bean.LoginResponse;import transport.school.com.schoolapp.bean.Route;import transport.school.com.schoolapp.bean.RouteReply;import transport.school.com.schoolapp.bean.RouteStudentList;import transport.school.com.schoolapp.bean.Stop;import transport.school.com.schoolapp.bean.StopResponse;public class WebServicesWrapper {    //private final static String BASE_URL = "https://vilger.pier31.co/";    private final static String BASE_URL = "http://www.webdesigner3.com/schoolbustracking/apis/";    ///  private final static String BASE_URL = "http://app.villiger.io/";    private static WebServicesWrapper wrapper;    protected WebServices webServices;    private Gson gson;    private WebServicesWrapper(String baseUrl) {        HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);        OkHttpClient client = new OkHttpClient.Builder().addInterceptor(interceptor).build();        webServices = new Retrofit.Builder()                .addConverterFactory(new RetrofitConverter())                .addConverterFactory(GsonConverterFactory.create())                .baseUrl(baseUrl)                .client(client)                .build().create(WebServices.class);        gson = new Gson();    }    public static WebServicesWrapper getInstance() {        if (wrapper == null)            wrapper = new WebServicesWrapper(BASE_URL);        return wrapper;    }    private Map<String, String> getPartMap(Object object) {        return (LinkedTreeMap) gson.fromJson(gson.toJson(object), Object.class);    }    private MultipartBody.Part getPart(String name, File file) {        if (file == null || name == null)            return null;        RequestBody requestFile = RequestBody.create(MediaType.parse("multipart/form-data"), file);        MultipartBody.Part body = MultipartBody.Part.createFormData(name, file.getName(), requestFile);        return body;    }    public String getAuthKey() {        return "Token " + AppBaseApplication.getApplication().getmAuthID();    }    public void getMyProfile(ResponseResolver<UserInfo> responseResolver) {    }    public Call<LoginResponse> login(LoginRequest loginRequest, ResponseResolver<LoginResponse> replyListCallee) {        Call<LoginResponse> loginResponseCall = webServices.login(loginRequest);        loginResponseCall.enqueue(replyListCallee);        return loginResponseCall;    }    public Call<RouteStudentList> getStudentListForRoute(Route route, ResponseResolver<RouteStudentList> replyStudentListCallee) {        Call<RouteStudentList> replyStudentListCall = webServices.getStudentListForRoute(route);        replyStudentListCall.enqueue(replyStudentListCallee);        return replyStudentListCall;    }    public Call<AttendanceUpdateResponse> postStudentAttendence(AttendanceRecord attendanceRecord, ResponseResolver<AttendanceUpdateResponse> attendanceRecordCallee) {        Call<AttendanceUpdateResponse> attendanceRecordCall = webServices.postStudentAttendence(attendanceRecord);        attendanceRecordCall.enqueue(attendanceRecordCallee);        return attendanceRecordCall;    }    public Call<AttendanceUpdateResponse> postStudentAbsent(AttendanceRecord attendanceRecord, ResponseResolver<AttendanceUpdateResponse> attendanceRecordCallee) {        Call<AttendanceUpdateResponse> attendanceRecordCall = webServices.postStudentAbsent(attendanceRecord);        attendanceRecordCall.enqueue(attendanceRecordCallee);        return attendanceRecordCall;    }    public Call<RouteReply> stopRoute(Route route, ResponseResolver<RouteReply> stopRouteCallee) {        Call<RouteReply> stopRouteCall = webServices.stopRoute(route);        stopRouteCall.enqueue(stopRouteCallee);        return stopRouteCall;    }    public Call<RouteReply> startRoute(Route route, ResponseResolver<RouteReply> startRouteCallee) {        Call<RouteReply> startRouteCall = webServices.startRoute(route);        startRouteCall.enqueue(startRouteCallee);        return startRouteCall;    }    public Call<ActiveRouteReply> getActiveRoute(Route route, ResponseResolver<ActiveRouteReply> activeRouteReplyCallee) {        Call<ActiveRouteReply> activeRouteReplyCall = webServices.getActiveRoute(route);        activeRouteReplyCall.enqueue(activeRouteReplyCallee);        return activeRouteReplyCall;    }    public Call<LocationUpdateRequest> getlocation(Route route, ResponseResolver<LocationUpdateRequest> sendLocationCallee) {        Call<LocationUpdateRequest> sendLocationCall = webServices.getlocation(route);        sendLocationCall.enqueue(sendLocationCallee);        return sendLocationCall;    }    public Call<RouteStudentList> getAttendence(AttendanceRecord attendanceRecord, ResponseResolver<RouteStudentList> routeStudentListCallee) {        Call<RouteStudentList> sendLocationCall = webServices.getAttendence(attendanceRecord);        sendLocationCall.enqueue(routeStudentListCallee);        return sendLocationCall;    }    public Call<StopResponse> getRoute(Stop stop, ResponseResolver<StopResponse> stopResonseCallee) {        Call<StopResponse> routeCall = webServices.getRoute(stop);        routeCall.enqueue(stopResonseCallee);        return routeCall;    }    public Call<String> postToken(DeviceTokenRegister deviceTokenRegister,ResponseResolver<String> deviceTokenReigsterCallee) {        Call<String> routeCall = webServices.postToken(deviceTokenRegister);        routeCall.enqueue(deviceTokenReigsterCallee);        return routeCall;    }}